name: publish-to-pypi
description: Publish a project to pypi.org

inputs:
  pypi-token:
    description: The pypi token to use for authentication
    required: true
  pre-release:
    description: Set to true if a pre-release version should be published.
    required: false
    default: false
  dry-run:
    description: Set to true for a test run that doesn't publish or tag.
    default: false

runs:
  using: 'composite'
  steps:
    - name: Determine the minimum version for this release (the one in the pyproject.toml file)
      shell: bash
      id: get-minimum-version
      run: echo "minimum-version=$(${{ github.action_path }}/get-minimum-version.sh)" >> $GITHUB_OUTPUT

    - name: Compute the release and prerelease versions
      id: get-versions
      shell: bash
      run: |
        RELEASE="$(pypi next-version coveo-stew --minimum-version ${{ steps.get-minimum-version.outputs.minimum-version }})"
        PRERELEASE="$(pypi next-version coveo-stew --prerelease --minimum-version ${{ steps.get-minimum-version.outputs.minimum-version }})"
        echo "release=$RELEASE" >> $GITHUB_OUTPUT
        echo "Next release: $RELEASE"
        echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
        echo "Next prerelease: $PRERELEASE"

    - name: Determine the version to publish.
      shell: bash
      id: get-next-version
      run: |
        if [[ ${{ inputs.pre-release }} == true ]]; then
          echo "version=${{ steps.get-versions.outputs.prerelease }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ steps.get-versions.outputs.release }}" >> $GITHUB_OUTPUT
        fi

    - name: Setup poetry for publish
      shell: bash
      run: |
        poetry version ${{ steps.get-next-version.outputs.version }}
        poetry build
        poetry config pypi-token.pypi ${{ inputs.pypi-token }}

    - name: Publish to pypi.org
      shell: bash
      run: |
        if [[ ${{ inputs.dry-run }} == false ]]; then
          poetry publish --no-interaction
        else
          echo "Just a dry run; we're not actually publishing"
        fi

    - name: Tag repository
      shell: bash
      id: get-next-tag
      run: |
        TAG_NAME=${{ steps.get-next-version.outputs.version }}
        echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "This release will be tagged as $TAG_NAME"
        git config user.name "github-actions"
        git config user.email "actions@users.noreply.github.com"
        git tag --annotate --message="Automated tagging system" $TAG_NAME ${{ github.sha }}

    - name: Push the tag
      shell: bash
      env:
        TAG_NAME: ${{ steps.get-next-tag.outputs.tag-name }}
      run: |
        if [[ ${{ inputs.dry-run }} == false ]]; then
          git push origin $TAG_NAME
        else
          echo "If this wasn't a dry run, I would push this new tag named $TAG_NAME"
        fi
